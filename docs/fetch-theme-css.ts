// server/plugins/fetch-theme-css.ts

import { writeFile } from "node:fs/promises";
import { join } from "pathe";
// See https://directus.io/docs/guides/connect/sdk
// Static token generated by logging in, and generating static token for the Admin user
import { readItems, createDirectus, rest, staticToken } from "@directus/sdk";
// Schema types generated from Directus using https://github.com/bryantgillespie/directus-sdk-typegen
import type { Schema } from "~~/shared/types/schema";

interface ThemeSettings {
  colorAccent: { name: string; color: string } | null;
  colorPrimary: { name: string; color: string } | null;
  fontHeading: string | null;
  fontHeadingSource: string | null;
  fontBody: string | null;
  fontBodySource: string | null;
  radiusStyle?: string | null;
  spacingStyle?: string | null;
  trackingStyle?: string | null;
  shadowStyle?: string | null;
  cssText?: string | null;
}

export function getDirectus() {
  const { DIRECTUS_URL, DIRECTUS_SERVER_TOKEN } = import.meta.env;

  if (!DIRECTUS_URL || !DIRECTUS_SERVER_TOKEN) {
    throw new Error("Directus URL or Server Token is not configured.");
  }

  return createDirectus<Schema>(DIRECTUS_URL)
    .with(rest())
    .with(staticToken(DIRECTUS_SERVER_TOKEN));
}

export default defineNitroPlugin(async (nitroApp) => {
  try {
    const directusServer = getDirectus();

    // Fetch globals.theme_settings
    // TODO: Update to match your Directus collection and field names
    const globalsItems = await directusServer.request(
      readItems("globals", {
        limit: 1,
        fields: ["theme_settings"],
      })
    );

    if (!globalsItems || globalsItems.length === 0) {
      console.warn("[fetch-theme-css] No global settings found.");
      return;
    }

    const themeSettings = globalsItems[0]?.theme_settings as
      | ThemeSettings
      | null
      | undefined;

    if (!themeSettings) {
      console.warn("[fetch-theme-css] No theme settings found in globals.");
      return;
    }

    const NOTICE = `/* This file is auto-generated. Do not edit directly. */\n\n`;
    const rawCssText = themeSettings.cssText;

    if (!rawCssText || !rawCssText.trim()) {
      console.warn(
        "[fetch-theme-css] CSS text in theme_settings is empty. Skipping file write."
      );
      return;
    }

    const finalCssText = NOTICE + rawCssText.trim() + "\n";

    const outputPath = join(
      process.cwd(),
      "app/assets/css/theme-generated.css"
    );
    await writeFile(outputPath, finalCssText);
    console.log(`[fetch-theme-css] Theme CSS written to ${outputPath}`);
  } catch (error) {
    console.error("[fetch-theme-css] Error processing theme CSS:", error);
  }
});
